//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: usermsgcenter/customer_message.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


public final class GECustomerMessageClient {

  /// Asynchronous unary call to UserDeleteMessages.
  ///
  /// - Parameters:
  ///   - request: Request to send to UserDeleteMessages.
  /// - callback: Result<GEUserDeleteMessagesResponse, Error>) -> Void.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  @discardableResult
  public static func userDeleteMessages(request: GEUserDeleteMessagesRequest, callback: @escaping (Result<GEUserDeleteMessagesResponse, Error>) -> Void) -> Bool {
    guard let client = grpcCient  else { return false }
    let api = "/usermsgcenter.CustomerMessage/UserDeleteMessages"

    let call = client.makeUnaryCall(path: api,
                              request: request,
                              callOptions: client.defaultCallOptions,
                              interceptors: [GRPCInterceptor()],
                              responseType: GEUserDeleteMessagesResponse.self)

    call.response.whenCompleteBlocking(onto: .main, callback)

    return true
  }
  /// EventLoopFuture to UserDeleteMessages. to UserDeleteMessages.
  ///
  /// - Parameters:
  ///   - request: Request to send to UserDeleteMessages.
  /// - Returns: A `response` with futures for the metadata, status and response.
  public static func userDeleteMessages(request: GEUserDeleteMessagesRequest) throws -> EventLoopFuture<GEUserDeleteMessagesResponse> {
    guard let client = grpcCient  else { throw GRPCError.InvalidState("GRPC Engine Invalid.") }
    let api = "/usermsgcenter.CustomerMessage/UserDeleteMessages"



    let call = client.makeUnaryCall(path: api,
                              request: request,
                              callOptions: client.defaultCallOptions,
                              interceptors: [GRPCInterceptor()],
                              responseType: GEUserDeleteMessagesResponse.self)

    return call.response
  }

  /// Asynchronous unary call to UserGetMessages.
  ///
  /// - Parameters:
  ///   - request: Request to send to UserGetMessages.
  /// - callback: Result<GEUserDeleteMessagesResponse, Error>) -> Void.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  @discardableResult
  public static func userGetMessages(request: GEUserGetMessagesRequest, callback: @escaping (Result<GEUserGetMessagesResponse, Error>) -> Void) -> Bool {
    guard let client = grpcCient  else { return false }
    let api = "/usermsgcenter.CustomerMessage/UserGetMessages"

    let call = client.makeUnaryCall(path: api,
                              request: request,
                              callOptions: client.defaultCallOptions,
                              interceptors: [GRPCInterceptor()],
                              responseType: GEUserGetMessagesResponse.self)

    call.response.whenCompleteBlocking(onto: .main, callback)

    return true
  }
  /// EventLoopFuture to UserDeleteMessages. to UserGetMessages.
  ///
  /// - Parameters:
  ///   - request: Request to send to UserGetMessages.
  /// - Returns: A `response` with futures for the metadata, status and response.
  public static func userGetMessages(request: GEUserGetMessagesRequest) throws -> EventLoopFuture<GEUserGetMessagesResponse> {
    guard let client = grpcCient  else { throw GRPCError.InvalidState("GRPC Engine Invalid.") }
    let api = "/usermsgcenter.CustomerMessage/UserGetMessages"



    let call = client.makeUnaryCall(path: api,
                              request: request,
                              callOptions: client.defaultCallOptions,
                              interceptors: [GRPCInterceptor()],
                              responseType: GEUserGetMessagesResponse.self)

    return call.response
  }

  /// Asynchronous unary call to UserGetUnreadMessageCount.
  ///
  /// - Parameters:
  ///   - request: Request to send to UserGetUnreadMessageCount.
  /// - callback: Result<GEUserDeleteMessagesResponse, Error>) -> Void.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  @discardableResult
  public static func userGetUnreadMessageCount(request: GEUserGetUnreadMessageCountRequest, callback: @escaping (Result<GEUserGetUnreadMessageCountResponse, Error>) -> Void) -> Bool {
    guard let client = grpcCient  else { return false }
    let api = "/usermsgcenter.CustomerMessage/UserGetUnreadMessageCount"

    let call = client.makeUnaryCall(path: api,
                              request: request,
                              callOptions: client.defaultCallOptions,
                              interceptors: [GRPCInterceptor()],
                              responseType: GEUserGetUnreadMessageCountResponse.self)

    call.response.whenCompleteBlocking(onto: .main, callback)

    return true
  }
  /// EventLoopFuture to UserDeleteMessages. to UserGetUnreadMessageCount.
  ///
  /// - Parameters:
  ///   - request: Request to send to UserGetUnreadMessageCount.
  /// - Returns: A `response` with futures for the metadata, status and response.
  public static func userGetUnreadMessageCount(request: GEUserGetUnreadMessageCountRequest) throws -> EventLoopFuture<GEUserGetUnreadMessageCountResponse> {
    guard let client = grpcCient  else { throw GRPCError.InvalidState("GRPC Engine Invalid.") }
    let api = "/usermsgcenter.CustomerMessage/UserGetUnreadMessageCount"



    let call = client.makeUnaryCall(path: api,
                              request: request,
                              callOptions: client.defaultCallOptions,
                              interceptors: [GRPCInterceptor()],
                              responseType: GEUserGetUnreadMessageCountResponse.self)

    return call.response
  }

  /// Asynchronous unary call to UserSetAllMessagesRead.
  ///
  /// - Parameters:
  ///   - request: Request to send to UserSetAllMessagesRead.
  /// - callback: Result<GEUserDeleteMessagesResponse, Error>) -> Void.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  @discardableResult
  public static func userSetAllMessagesRead(request: GEUserSetAllMessagesReadRequest, callback: @escaping (Result<GEUserSetAllMessagesReadResponse, Error>) -> Void) -> Bool {
    guard let client = grpcCient  else { return false }
    let api = "/usermsgcenter.CustomerMessage/UserSetAllMessagesRead"

    let call = client.makeUnaryCall(path: api,
                              request: request,
                              callOptions: client.defaultCallOptions,
                              interceptors: [GRPCInterceptor()],
                              responseType: GEUserSetAllMessagesReadResponse.self)

    call.response.whenCompleteBlocking(onto: .main, callback)

    return true
  }
  /// EventLoopFuture to UserDeleteMessages. to UserSetAllMessagesRead.
  ///
  /// - Parameters:
  ///   - request: Request to send to UserSetAllMessagesRead.
  /// - Returns: A `response` with futures for the metadata, status and response.
  public static func userSetAllMessagesRead(request: GEUserSetAllMessagesReadRequest) throws -> EventLoopFuture<GEUserSetAllMessagesReadResponse> {
    guard let client = grpcCient  else { throw GRPCError.InvalidState("GRPC Engine Invalid.") }
    let api = "/usermsgcenter.CustomerMessage/UserSetAllMessagesRead"



    let call = client.makeUnaryCall(path: api,
                              request: request,
                              callOptions: client.defaultCallOptions,
                              interceptors: [GRPCInterceptor()],
                              responseType: GEUserSetAllMessagesReadResponse.self)

    return call.response
  }

  /// Asynchronous unary call to UserSetMessageRead.
  ///
  /// - Parameters:
  ///   - request: Request to send to UserSetMessageRead.
  /// - callback: Result<GEUserDeleteMessagesResponse, Error>) -> Void.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  @discardableResult
  public static func userSetMessageRead(request: GEUserSetMessageReadRequest, callback: @escaping (Result<GEUserSetMessageReadResponse, Error>) -> Void) -> Bool {
    guard let client = grpcCient  else { return false }
    let api = "/usermsgcenter.CustomerMessage/UserSetMessageRead"

    let call = client.makeUnaryCall(path: api,
                              request: request,
                              callOptions: client.defaultCallOptions,
                              interceptors: [GRPCInterceptor()],
                              responseType: GEUserSetMessageReadResponse.self)

    call.response.whenCompleteBlocking(onto: .main, callback)

    return true
  }
  /// EventLoopFuture to UserDeleteMessages. to UserSetMessageRead.
  ///
  /// - Parameters:
  ///   - request: Request to send to UserSetMessageRead.
  /// - Returns: A `response` with futures for the metadata, status and response.
  public static func userSetMessageRead(request: GEUserSetMessageReadRequest) throws -> EventLoopFuture<GEUserSetMessageReadResponse> {
    guard let client = grpcCient  else { throw GRPCError.InvalidState("GRPC Engine Invalid.") }
    let api = "/usermsgcenter.CustomerMessage/UserSetMessageRead"



    let call = client.makeUnaryCall(path: api,
                              request: request,
                              callOptions: client.defaultCallOptions,
                              interceptors: [GRPCInterceptor()],
                              responseType: GEUserSetMessageReadResponse.self)

    return call.response
  }

  /// Asynchronous unary call to UserSetMessagesRead.
  ///
  /// - Parameters:
  ///   - request: Request to send to UserSetMessagesRead.
  /// - callback: Result<GEUserDeleteMessagesResponse, Error>) -> Void.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  @discardableResult
  public static func userSetMessagesRead(request: GEUserSetMessagesReadRequest, callback: @escaping (Result<GEUserSetMessagesReadResponse, Error>) -> Void) -> Bool {
    guard let client = grpcCient  else { return false }
    let api = "/usermsgcenter.CustomerMessage/UserSetMessagesRead"

    let call = client.makeUnaryCall(path: api,
                              request: request,
                              callOptions: client.defaultCallOptions,
                              interceptors: [GRPCInterceptor()],
                              responseType: GEUserSetMessagesReadResponse.self)

    call.response.whenCompleteBlocking(onto: .main, callback)

    return true
  }
  /// EventLoopFuture to UserDeleteMessages. to UserSetMessagesRead.
  ///
  /// - Parameters:
  ///   - request: Request to send to UserSetMessagesRead.
  /// - Returns: A `response` with futures for the metadata, status and response.
  public static func userSetMessagesRead(request: GEUserSetMessagesReadRequest) throws -> EventLoopFuture<GEUserSetMessagesReadResponse> {
    guard let client = grpcCient  else { throw GRPCError.InvalidState("GRPC Engine Invalid.") }
    let api = "/usermsgcenter.CustomerMessage/UserSetMessagesRead"



    let call = client.makeUnaryCall(path: api,
                              request: request,
                              callOptions: client.defaultCallOptions,
                              interceptors: [GRPCInterceptor()],
                              responseType: GEUserSetMessagesReadResponse.self)

    return call.response
  }

  /// Asynchronous unary call to Test.
  ///
  /// - Parameters:
  ///   - request: Request to send to Test.
  /// - callback: Result<GEUserDeleteMessagesResponse, Error>) -> Void.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  @discardableResult
  public static func test(request: COCommon, callback: @escaping (Result<COEmpty, Error>) -> Void) -> Bool {
    guard let client = grpcCient  else { return false }
    let api = "/usermsgcenter.CustomerMessage/Test"

    let call = client.makeUnaryCall(path: api,
                              request: request,
                              callOptions: client.defaultCallOptions,
                              interceptors: [GRPCInterceptor()],
                              responseType: COEmpty.self)

    call.response.whenCompleteBlocking(onto: .main, callback)

    return true
  }
  /// EventLoopFuture to UserDeleteMessages. to Test.
  ///
  /// - Parameters:
  ///   - request: Request to send to Test.
  /// - Returns: A `response` with futures for the metadata, status and response.
  public static func test(request: COCommon) throws -> EventLoopFuture<COEmpty> {
    guard let client = grpcCient  else { throw GRPCError.InvalidState("GRPC Engine Invalid.") }
    let api = "/usermsgcenter.CustomerMessage/Test"



    let call = client.makeUnaryCall(path: api,
                              request: request,
                              callOptions: client.defaultCallOptions,
                              interceptors: [GRPCInterceptor()],
                              responseType: COEmpty.self)

    return call.response
  }

}

