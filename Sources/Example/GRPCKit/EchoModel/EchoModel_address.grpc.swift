//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: EchoModel/address.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


public final class Address_AddressInfoClient {

  /// Asynchronous unary call to getShippingAddressListForCheckout.
  ///
  /// - Parameters:
  ///   - request: Request to send to getShippingAddressListForCheckout.
  /// - callback: Result<GEUserDeleteMessagesResponse, Error>) -> Void.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  @discardableResult
  public static func getShippingAddressListForCheckout(request: Address_GetShippingAddressListForCheckoutReq, callback: @escaping (Result<Address_GetShippingAddressListForCheckoutFakeResp, Error>) -> Void) -> Bool {
    guard let client = grpcCient  else { return false }
    let api = "/address.AddressInfo/getShippingAddressListForCheckout"

    let call = client.makeUnaryCall(path: api,
                              request: request,
                              callOptions: client.defaultCallOptions,
                              interceptors: [GRPCInterceptor()],
                              responseType: Address_GetShippingAddressListForCheckoutFakeResp.self)

    call.response.whenCompleteBlocking(onto: .main, callback)

    return true
  }
  /// EventLoopFuture to UserDeleteMessages. to getShippingAddressListForCheckout.
  ///
  /// - Parameters:
  ///   - request: Request to send to getShippingAddressListForCheckout.
  /// - Returns: A `response` with futures for the metadata, status and response.
  public static func getShippingAddressListForCheckout(request: Address_GetShippingAddressListForCheckoutReq) throws -> EventLoopFuture<Address_GetShippingAddressListForCheckoutFakeResp> {
    guard let client = grpcCient  else { throw GRPCError.InvalidState("GRPC Engine Invalid.") }
    let api = "/address.AddressInfo/getShippingAddressListForCheckout"

    

    let call = client.makeUnaryCall(path: api,
                              request: request,
                              callOptions: client.defaultCallOptions,
                              interceptors: [GRPCInterceptor()],
                              responseType: Address_GetShippingAddressListForCheckoutFakeResp.self)

    return call.response
  }

  /// Asynchronous unary call to getAddressListForAddressBook.
  ///
  /// - Parameters:
  ///   - request: Request to send to getAddressListForAddressBook.
  /// - callback: Result<GEUserDeleteMessagesResponse, Error>) -> Void.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  @discardableResult
  public static func getAddressListForAddressBook(request: Address_GetAddressListForAddressBookReq, callback: @escaping (Result<Address_GetAddressListForAddressBookFakeResp, Error>) -> Void) -> Bool {
    guard let client = grpcCient  else { return false }
    let api = "/address.AddressInfo/getAddressListForAddressBook"

    

    let call = client.makeUnaryCall(path: api,
                              request: request,
                              callOptions: client.defaultCallOptions,
                              interceptors: [GRPCInterceptor()],
                              responseType: Address_GetAddressListForAddressBookFakeResp.self)

    call.response.whenCompleteBlocking(onto: .main, callback)

    return true
  }
  /// EventLoopFuture to UserDeleteMessages. to getAddressListForAddressBook.
  ///
  /// - Parameters:
  ///   - request: Request to send to getAddressListForAddressBook.
  /// - Returns: A `response` with futures for the metadata, status and response.
  public static func getAddressListForAddressBook(request: Address_GetAddressListForAddressBookReq) throws -> EventLoopFuture<Address_GetAddressListForAddressBookFakeResp> {
    guard let client = grpcCient  else { throw GRPCError.InvalidState("GRPC Engine Invalid.") }
    let api = "/address.AddressInfo/getAddressListForAddressBook"

    

    let call = client.makeUnaryCall(path: api,
                              request: request,
                              callOptions: client.defaultCallOptions,
                              interceptors: [GRPCInterceptor()],
                              responseType: Address_GetAddressListForAddressBookFakeResp.self)

    return call.response
  }

  /// Asynchronous unary call to getAddressDetail.
  ///
  /// - Parameters:
  ///   - request: Request to send to getAddressDetail.
  /// - callback: Result<GEUserDeleteMessagesResponse, Error>) -> Void.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  @discardableResult
  public static func getAddressDetail(request: Address_GetAddressDetailReq, callback: @escaping (Result<Address_GetAddressDetailFakeResp, Error>) -> Void) -> Bool {
    guard let client = grpcCient  else { return false }
    let api = "/address.AddressInfo/getAddressDetail"

    

    let call = client.makeUnaryCall(path: api,
                              request: request,
                              callOptions: client.defaultCallOptions,
                              interceptors: [GRPCInterceptor()],
                              responseType: Address_GetAddressDetailFakeResp.self)

    call.response.whenCompleteBlocking(onto: .main, callback)

    return true
  }
  /// EventLoopFuture to UserDeleteMessages. to getAddressDetail.
  ///
  /// - Parameters:
  ///   - request: Request to send to getAddressDetail.
  /// - Returns: A `response` with futures for the metadata, status and response.
  public static func getAddressDetail(request: Address_GetAddressDetailReq) throws -> EventLoopFuture<Address_GetAddressDetailFakeResp> {
    guard let client = grpcCient  else { throw GRPCError.InvalidState("GRPC Engine Invalid.") }
    let api = "/address.AddressInfo/getAddressDetail"

    

    let call = client.makeUnaryCall(path: api,
                              request: request,
                              callOptions: client.defaultCallOptions,
                              interceptors: [GRPCInterceptor()],
                              responseType: Address_GetAddressDetailFakeResp.self)

    return call.response
  }

  /// Asynchronous unary call to addAddress.
  ///
  /// - Parameters:
  ///   - request: Request to send to addAddress.
  /// - callback: Result<GEUserDeleteMessagesResponse, Error>) -> Void.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  @discardableResult
  public static func addAddress(request: Address_AddAddressReq, callback: @escaping (Result<Address_AddAddressFakeResp, Error>) -> Void) -> Bool {
    guard let client = grpcCient  else { return false }
    let api = "/address.AddressInfo/addAddress"

    

    let call = client.makeUnaryCall(path: api,
                              request: request,
                              callOptions: client.defaultCallOptions,
                              interceptors: [GRPCInterceptor()],
                              responseType: Address_AddAddressFakeResp.self)

    call.response.whenCompleteBlocking(onto: .main, callback)

    return true
  }
  /// EventLoopFuture to UserDeleteMessages. to addAddress.
  ///
  /// - Parameters:
  ///   - request: Request to send to addAddress.
  /// - Returns: A `response` with futures for the metadata, status and response.
  public static func addAddress(request: Address_AddAddressReq) throws -> EventLoopFuture<Address_AddAddressFakeResp> {
    guard let client = grpcCient  else { throw GRPCError.InvalidState("GRPC Engine Invalid.") }
    let api = "/address.AddressInfo/addAddress"

    

    let call = client.makeUnaryCall(path: api,
                              request: request,
                              callOptions: client.defaultCallOptions,
                              interceptors: [GRPCInterceptor()],
                              responseType: Address_AddAddressFakeResp.self)

    return call.response
  }

  /// Asynchronous unary call to editAddress.
  ///
  /// - Parameters:
  ///   - request: Request to send to editAddress.
  /// - callback: Result<GEUserDeleteMessagesResponse, Error>) -> Void.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  @discardableResult
  public static func editAddress(request: Address_EditAddressReq, callback: @escaping (Result<Address_EditAddressFakeResp, Error>) -> Void) -> Bool {
    guard let client = grpcCient  else { return false }
    let api = "/address.AddressInfo/editAddress"

    

    let call = client.makeUnaryCall(path: api,
                              request: request,
                              callOptions: client.defaultCallOptions,
                              interceptors: [GRPCInterceptor()],
                              responseType: Address_EditAddressFakeResp.self)

    call.response.whenCompleteBlocking(onto: .main, callback)

    return true
  }
  /// EventLoopFuture to UserDeleteMessages. to editAddress.
  ///
  /// - Parameters:
  ///   - request: Request to send to editAddress.
  /// - Returns: A `response` with futures for the metadata, status and response.
  public static func editAddress(request: Address_EditAddressReq) throws -> EventLoopFuture<Address_EditAddressFakeResp> {
    guard let client = grpcCient  else { throw GRPCError.InvalidState("GRPC Engine Invalid.") }
    let api = "/address.AddressInfo/editAddress"

    

    let call = client.makeUnaryCall(path: api,
                              request: request,
                              callOptions: client.defaultCallOptions,
                              interceptors: [GRPCInterceptor()],
                              responseType: Address_EditAddressFakeResp.self)

    return call.response
  }

  /// Asynchronous unary call to getCountryCascadeInfo.
  ///
  /// - Parameters:
  ///   - request: Request to send to getCountryCascadeInfo.
  /// - callback: Result<GEUserDeleteMessagesResponse, Error>) -> Void.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  @discardableResult
  public static func getCountryCascadeInfo(request: Address_GetCountryCascadeInfoReq, callback: @escaping (Result<Address_GetCountryCascadeInfoFakeResp, Error>) -> Void) -> Bool {
    guard let client = grpcCient  else { return false }
    let api = "/address.AddressInfo/getCountryCascadeInfo"

    

    let call = client.makeUnaryCall(path: api,
                              request: request,
                              callOptions: client.defaultCallOptions,
                              interceptors: [GRPCInterceptor()],
                              responseType: Address_GetCountryCascadeInfoFakeResp.self)

    call.response.whenCompleteBlocking(onto: .main, callback)

    return true
  }
  /// EventLoopFuture to UserDeleteMessages. to getCountryCascadeInfo.
  ///
  /// - Parameters:
  ///   - request: Request to send to getCountryCascadeInfo.
  /// - Returns: A `response` with futures for the metadata, status and response.
  public static func getCountryCascadeInfo(request: Address_GetCountryCascadeInfoReq) throws -> EventLoopFuture<Address_GetCountryCascadeInfoFakeResp> {
    guard let client = grpcCient  else { throw GRPCError.InvalidState("GRPC Engine Invalid.") }
    let api = "/address.AddressInfo/getCountryCascadeInfo"

    

    let call = client.makeUnaryCall(path: api,
                              request: request,
                              callOptions: client.defaultCallOptions,
                              interceptors: [GRPCInterceptor()],
                              responseType: Address_GetCountryCascadeInfoFakeResp.self)

    return call.response
  }

  /// Asynchronous unary call to getBillingAddressDetail.
  ///
  /// - Parameters:
  ///   - request: Request to send to getBillingAddressDetail.
  /// - callback: Result<GEUserDeleteMessagesResponse, Error>) -> Void.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  @discardableResult
  public static func getBillingAddressDetail(request: Address_GetBillingAddressDetailReq, callback: @escaping (Result<Address_GetBillingAddressDetailFakeResp, Error>) -> Void) -> Bool {
    guard let client = grpcCient  else { return false }
    let api = "/address.AddressInfo/getBillingAddressDetail"

    

    let call = client.makeUnaryCall(path: api,
                              request: request,
                              callOptions: client.defaultCallOptions,
                              interceptors: [GRPCInterceptor()],
                              responseType: Address_GetBillingAddressDetailFakeResp.self)

    call.response.whenCompleteBlocking(onto: .main, callback)

    return true
  }
  /// EventLoopFuture to UserDeleteMessages. to getBillingAddressDetail.
  ///
  /// - Parameters:
  ///   - request: Request to send to getBillingAddressDetail.
  /// - Returns: A `response` with futures for the metadata, status and response.
  public static func getBillingAddressDetail(request: Address_GetBillingAddressDetailReq) throws -> EventLoopFuture<Address_GetBillingAddressDetailFakeResp> {
    guard let client = grpcCient  else { throw GRPCError.InvalidState("GRPC Engine Invalid.") }
    let api = "/address.AddressInfo/getBillingAddressDetail"

    

    let call = client.makeUnaryCall(path: api,
                              request: request,
                              callOptions: client.defaultCallOptions,
                              interceptors: [GRPCInterceptor()],
                              responseType: Address_GetBillingAddressDetailFakeResp.self)

    return call.response
  }

  /// Asynchronous unary call to modifyBillingAddressWithOrder.
  ///
  /// - Parameters:
  ///   - request: Request to send to modifyBillingAddressWithOrder.
  /// - callback: Result<GEUserDeleteMessagesResponse, Error>) -> Void.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  @discardableResult
  public static func modifyBillingAddressWithOrder(request: Address_ModifyBillingAddressWithOrderReq, callback: @escaping (Result<Address_ModifyBillingAddressWithOrderFakeResp, Error>) -> Void) -> Bool {
    guard let client = grpcCient  else { return false }
    let api = "/address.AddressInfo/modifyBillingAddressWithOrder"

    

    let call = client.makeUnaryCall(path: api,
                              request: request,
                              callOptions: client.defaultCallOptions,
                              interceptors: [GRPCInterceptor()],
                              responseType: Address_ModifyBillingAddressWithOrderFakeResp.self)

    call.response.whenCompleteBlocking(onto: .main, callback)

    return true
  }
  /// EventLoopFuture to UserDeleteMessages. to modifyBillingAddressWithOrder.
  ///
  /// - Parameters:
  ///   - request: Request to send to modifyBillingAddressWithOrder.
  /// - Returns: A `response` with futures for the metadata, status and response.
  public static func modifyBillingAddressWithOrder(request: Address_ModifyBillingAddressWithOrderReq) throws -> EventLoopFuture<Address_ModifyBillingAddressWithOrderFakeResp> {
    guard let client = grpcCient  else { throw GRPCError.InvalidState("GRPC Engine Invalid.") }
    let api = "/address.AddressInfo/modifyBillingAddressWithOrder"

    

    let call = client.makeUnaryCall(path: api,
                              request: request,
                              callOptions: client.defaultCallOptions,
                              interceptors: [GRPCInterceptor()],
                              responseType: Address_ModifyBillingAddressWithOrderFakeResp.self)

    return call.response
  }

  /// Asynchronous unary call to deleteAddress.
  ///
  /// - Parameters:
  ///   - request: Request to send to deleteAddress.
  /// - callback: Result<GEUserDeleteMessagesResponse, Error>) -> Void.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  @discardableResult
  public static func deleteAddress(request: Address_DeleteAddressReq, callback: @escaping (Result<Address_DeleteAddressResp, Error>) -> Void) -> Bool {
    guard let client = grpcCient  else { return false }
    let api = "/address.AddressInfo/deleteAddress"

    

    let call = client.makeUnaryCall(path: api,
                              request: request,
                              callOptions: client.defaultCallOptions,
                              interceptors: [GRPCInterceptor()],
                              responseType: Address_DeleteAddressResp.self)

    call.response.whenCompleteBlocking(onto: .main, callback)

    return true
  }
  /// EventLoopFuture to UserDeleteMessages. to deleteAddress.
  ///
  /// - Parameters:
  ///   - request: Request to send to deleteAddress.
  /// - Returns: A `response` with futures for the metadata, status and response.
  public static func deleteAddress(request: Address_DeleteAddressReq) throws -> EventLoopFuture<Address_DeleteAddressResp> {
    guard let client = grpcCient  else { throw GRPCError.InvalidState("GRPC Engine Invalid.") }
    let api = "/address.AddressInfo/deleteAddress"

    

    let call = client.makeUnaryCall(path: api,
                              request: request,
                              callOptions: client.defaultCallOptions,
                              interceptors: [GRPCInterceptor()],
                              responseType: Address_DeleteAddressResp.self)

    return call.response
  }

}

