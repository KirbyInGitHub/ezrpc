// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: EchoModel/common_public.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum Common_AddressTypeEnum: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  ///占位
  case unknown // = 0

  ///deliveryAddress
  case delivery // = 1

  ///billingAddress
  case billing // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .delivery
    case 2: self = .billing
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .delivery: return 1
    case .billing: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Common_AddressTypeEnum: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Common_AddressTypeEnum] = [
    .unknown,
    .delivery,
    .billing,
  ]
}

#endif  // swift(>=4.2)

public enum Common_PaymentStatusEnum: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// 初始化
  case init_ // = 0

  /// 重定向
  case redirect // = 5

  /// 处理中
  case processing // = 10

  ///COD初始化
  case codInit // = 11

  ///部分支付
  case codProcessing // = 15

  /// 成功
  case successed // = 20

  /// 失败
  case failed // = 30
  case UNRECOGNIZED(Int)

  public init() {
    self = .init_
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .init_
    case 5: self = .redirect
    case 10: self = .processing
    case 11: self = .codInit
    case 15: self = .codProcessing
    case 20: self = .successed
    case 30: self = .failed
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .init_: return 0
    case .redirect: return 5
    case .processing: return 10
    case .codInit: return 11
    case .codProcessing: return 15
    case .successed: return 20
    case .failed: return 30
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Common_PaymentStatusEnum: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Common_PaymentStatusEnum] = [
    .init_,
    .redirect,
    .processing,
    .codInit,
    .codProcessing,
    .successed,
    .failed,
  ]
}

#endif  // swift(>=4.2)

public enum Common_PayNameEnum: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// 支付方式
  case payNameUnknown // = 0

  ///BOLETO
  case boleto // = 1

  ///Brazil Installments
  case brazilInstallments // = 2

  ///Credit or Debit Card
  case creditOrDebitCard // = 3

  ///Ideal
  case ideal // = 4

  ///Klarna pay later
  case klarnaPayLater // = 5

  ///klarna slice it
  case klarnaSliceIt // = 6

  ///Mexico Installments
  case mexicoInstallments // = 7

  ///NetBanking
  case netbanking // = 8

  ///OXXO
  case oxxo // = 9

  ///Pago a Plazos
  case pagoAPlazos // = 10

  ///Parcelamento
  case parcelamento // = 11

  ///PayPal
  case paypal // = 12

  ///PayPal Express
  case paypalExpress // = 13

  ///paytm
  case paytm // = 14

  ///QIWI
  case qiwi // = 15

  ///Rupay
  case rupay // = 16

  ///Sofort
  case sofort // = 17

  ///UPI
  case upi // = 18

  ///westernunion
  case westernunion // = 19

  ///wiretransfer
  case wiretransfer // = 20

  ///Yandexmoney
  case yandexmoney // = 21

  ///Rewards & Credit
  case storeCredit // = 22

  ///Klarna pay in 3 installments
  case klarnaPayIn3Installments // = 23

  ///Klarna pay in 4 installments
  case klarnaPayIn4Installments // = 24

  ///Bancontact
  case bancontact // = 25

  ///Multibanco
  case multibanco // = 26

  ///EPS
  case eps // = 27

  ///Giropay
  case giropay // = 28

  ///Cash On Delivery
  case cod // = 29

  ///Alipay
  case alipay // = 30

  ///WeChat Pay
  case wechatPay // = 31

  ///Przelewy24
  case przelewy24 // = 32
  case UNRECOGNIZED(Int)

  public init() {
    self = .payNameUnknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .payNameUnknown
    case 1: self = .boleto
    case 2: self = .brazilInstallments
    case 3: self = .creditOrDebitCard
    case 4: self = .ideal
    case 5: self = .klarnaPayLater
    case 6: self = .klarnaSliceIt
    case 7: self = .mexicoInstallments
    case 8: self = .netbanking
    case 9: self = .oxxo
    case 10: self = .pagoAPlazos
    case 11: self = .parcelamento
    case 12: self = .paypal
    case 13: self = .paypalExpress
    case 14: self = .paytm
    case 15: self = .qiwi
    case 16: self = .rupay
    case 17: self = .sofort
    case 18: self = .upi
    case 19: self = .westernunion
    case 20: self = .wiretransfer
    case 21: self = .yandexmoney
    case 22: self = .storeCredit
    case 23: self = .klarnaPayIn3Installments
    case 24: self = .klarnaPayIn4Installments
    case 25: self = .bancontact
    case 26: self = .multibanco
    case 27: self = .eps
    case 28: self = .giropay
    case 29: self = .cod
    case 30: self = .alipay
    case 31: self = .wechatPay
    case 32: self = .przelewy24
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .payNameUnknown: return 0
    case .boleto: return 1
    case .brazilInstallments: return 2
    case .creditOrDebitCard: return 3
    case .ideal: return 4
    case .klarnaPayLater: return 5
    case .klarnaSliceIt: return 6
    case .mexicoInstallments: return 7
    case .netbanking: return 8
    case .oxxo: return 9
    case .pagoAPlazos: return 10
    case .parcelamento: return 11
    case .paypal: return 12
    case .paypalExpress: return 13
    case .paytm: return 14
    case .qiwi: return 15
    case .rupay: return 16
    case .sofort: return 17
    case .upi: return 18
    case .westernunion: return 19
    case .wiretransfer: return 20
    case .yandexmoney: return 21
    case .storeCredit: return 22
    case .klarnaPayIn3Installments: return 23
    case .klarnaPayIn4Installments: return 24
    case .bancontact: return 25
    case .multibanco: return 26
    case .eps: return 27
    case .giropay: return 28
    case .cod: return 29
    case .alipay: return 30
    case .wechatPay: return 31
    case .przelewy24: return 32
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Common_PayNameEnum: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Common_PayNameEnum] = [
    .payNameUnknown,
    .boleto,
    .brazilInstallments,
    .creditOrDebitCard,
    .ideal,
    .klarnaPayLater,
    .klarnaSliceIt,
    .mexicoInstallments,
    .netbanking,
    .oxxo,
    .pagoAPlazos,
    .parcelamento,
    .paypal,
    .paypalExpress,
    .paytm,
    .qiwi,
    .rupay,
    .sofort,
    .upi,
    .westernunion,
    .wiretransfer,
    .yandexmoney,
    .storeCredit,
    .klarnaPayIn3Installments,
    .klarnaPayIn4Installments,
    .bancontact,
    .multibanco,
    .eps,
    .giropay,
    .cod,
    .alipay,
    .wechatPay,
    .przelewy24,
  ]
}

#endif  // swift(>=4.2)

public enum Common_TaxCodeOrIdCardTypeEnum: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// 未知类型
  case codeTypeUnknown // = 0

  /// 巴西 CPF(personal order)
  case cpf // = 1

  /// 巴西 CNPJ(company order)
  case cnpj // = 2

  /// 阿根廷 CUIL (personal order)
  case cuil // = 3

  /// 阿根廷 CUIT (company order)
  case cuit // = 4

  /// 泰国 Personal ID number(personal order)
  case personalIDNumber // = 5

  /// 泰国 VAT ID number(company order)
  case vatIDNumber // = 6

  ///墨西哥 CURP
  case curp // = 7
  case UNRECOGNIZED(Int)

  public init() {
    self = .codeTypeUnknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .codeTypeUnknown
    case 1: self = .cpf
    case 2: self = .cnpj
    case 3: self = .cuil
    case 4: self = .cuit
    case 5: self = .personalIDNumber
    case 6: self = .vatIDNumber
    case 7: self = .curp
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .codeTypeUnknown: return 0
    case .cpf: return 1
    case .cnpj: return 2
    case .cuil: return 3
    case .cuit: return 4
    case .personalIDNumber: return 5
    case .vatIDNumber: return 6
    case .curp: return 7
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Common_TaxCodeOrIdCardTypeEnum: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Common_TaxCodeOrIdCardTypeEnum] = [
    .codeTypeUnknown,
    .cpf,
    .cnpj,
    .cuil,
    .cuit,
    .personalIDNumber,
    .vatIDNumber,
    .curp,
  ]
}

#endif  // swift(>=4.2)

public enum Common_PayChannelEnum: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  ///UNKNOWN
  case na // = 0

  ///ADN_CC
  case adnCcChannel // = 1

  ///WP_CC
  case wpCcChannel // = 2

  ///IGN_CC
  case ignCcChannel // = 3

  ///CKO_CC
  case ckoCcChannel // = 4

  ///STR_CC
  case strCcChannel // = 5

  ///EBX_BR_Installments
  case ebxBrInstallmentsChannel // = 6

  ///EBX_MX_Installments
  case ebxMxInstallmentsChannel // = 7

  ///DL_BR_Installments
  case dlBrInstallmentsChannel // = 8

  ///DL_MX_Installments
  case dlMxInstallmentsChannel // = 9

  ///DL_OXXO
  case dlOxxoChannel // = 10

  ///DL_BOLETO
  case dlBoletoChannel // = 11

  ///EBX_BOLETO
  case ebxBoletoChannel // = 12

  ///WP_Ideal
  case wpIdealChannel // = 13

  ///WP_Sofort
  case wpSofortChannel // = 14

  ///QIWI
  case qiwiChannel // = 15

  ///IGN_Yandexmoney
  case ignYandexmoneyChannel // = 16

  ///IGN_westernunion
  case ignWesternunionChannel // = 17

  ///wiretransfer
  case wiretransferChannel // = 18

  ///klarna_paylater
  case klarnaPaylaterChannel // = 19

  ///klarna_sliceit
  case klarnaSliceitChannel // = 20

  ///paypal
  case paypalChannel // = 21

  ///PP_Express
  case ppExpressChannel // = 22

  ///paytm
  case paytmChannel // = 23

  ///payubiz_netbanking
  case payubizNetbankingChannel // = 24

  ///payubiz_upi
  case payubizUpiChannel // = 25

  ///dl_rupay
  case dlRupayChannel // = 26

  ///giftcard
  case giftcardChannel // = 27

  ///Klarna_uk_sliceit
  case klarnaUkSliceitChannel // = 28

  ///Store_credit
  case storeCreditChannel // = 29

  ///Klarna_us_sliceit
  case klarnaUsSliceitChannel // = 30

  ///CKO_Bancontact
  case ckoBancontactChannel // = 31

  ///CKO_Multibanco
  case ckoMultibancoChannel // = 32

  ///CKO_EPS
  case ckoEpsChannel // = 33

  ///CKO_Giropay
  case ckoGiropayChannel // = 34

  ///cod
  case codChannel // = 35

  ///Alipay
  case alipayChannel // = 36

  ///WeChat Pay
  case wxpayChannel // = 37

  ///CKO_P24
  case ckoP24Channel // = 38
  case UNRECOGNIZED(Int)

  public init() {
    self = .na
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .na
    case 1: self = .adnCcChannel
    case 2: self = .wpCcChannel
    case 3: self = .ignCcChannel
    case 4: self = .ckoCcChannel
    case 5: self = .strCcChannel
    case 6: self = .ebxBrInstallmentsChannel
    case 7: self = .ebxMxInstallmentsChannel
    case 8: self = .dlBrInstallmentsChannel
    case 9: self = .dlMxInstallmentsChannel
    case 10: self = .dlOxxoChannel
    case 11: self = .dlBoletoChannel
    case 12: self = .ebxBoletoChannel
    case 13: self = .wpIdealChannel
    case 14: self = .wpSofortChannel
    case 15: self = .qiwiChannel
    case 16: self = .ignYandexmoneyChannel
    case 17: self = .ignWesternunionChannel
    case 18: self = .wiretransferChannel
    case 19: self = .klarnaPaylaterChannel
    case 20: self = .klarnaSliceitChannel
    case 21: self = .paypalChannel
    case 22: self = .ppExpressChannel
    case 23: self = .paytmChannel
    case 24: self = .payubizNetbankingChannel
    case 25: self = .payubizUpiChannel
    case 26: self = .dlRupayChannel
    case 27: self = .giftcardChannel
    case 28: self = .klarnaUkSliceitChannel
    case 29: self = .storeCreditChannel
    case 30: self = .klarnaUsSliceitChannel
    case 31: self = .ckoBancontactChannel
    case 32: self = .ckoMultibancoChannel
    case 33: self = .ckoEpsChannel
    case 34: self = .ckoGiropayChannel
    case 35: self = .codChannel
    case 36: self = .alipayChannel
    case 37: self = .wxpayChannel
    case 38: self = .ckoP24Channel
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .na: return 0
    case .adnCcChannel: return 1
    case .wpCcChannel: return 2
    case .ignCcChannel: return 3
    case .ckoCcChannel: return 4
    case .strCcChannel: return 5
    case .ebxBrInstallmentsChannel: return 6
    case .ebxMxInstallmentsChannel: return 7
    case .dlBrInstallmentsChannel: return 8
    case .dlMxInstallmentsChannel: return 9
    case .dlOxxoChannel: return 10
    case .dlBoletoChannel: return 11
    case .ebxBoletoChannel: return 12
    case .wpIdealChannel: return 13
    case .wpSofortChannel: return 14
    case .qiwiChannel: return 15
    case .ignYandexmoneyChannel: return 16
    case .ignWesternunionChannel: return 17
    case .wiretransferChannel: return 18
    case .klarnaPaylaterChannel: return 19
    case .klarnaSliceitChannel: return 20
    case .paypalChannel: return 21
    case .ppExpressChannel: return 22
    case .paytmChannel: return 23
    case .payubizNetbankingChannel: return 24
    case .payubizUpiChannel: return 25
    case .dlRupayChannel: return 26
    case .giftcardChannel: return 27
    case .klarnaUkSliceitChannel: return 28
    case .storeCreditChannel: return 29
    case .klarnaUsSliceitChannel: return 30
    case .ckoBancontactChannel: return 31
    case .ckoMultibancoChannel: return 32
    case .ckoEpsChannel: return 33
    case .ckoGiropayChannel: return 34
    case .codChannel: return 35
    case .alipayChannel: return 36
    case .wxpayChannel: return 37
    case .ckoP24Channel: return 38
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Common_PayChannelEnum: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Common_PayChannelEnum] = [
    .na,
    .adnCcChannel,
    .wpCcChannel,
    .ignCcChannel,
    .ckoCcChannel,
    .strCcChannel,
    .ebxBrInstallmentsChannel,
    .ebxMxInstallmentsChannel,
    .dlBrInstallmentsChannel,
    .dlMxInstallmentsChannel,
    .dlOxxoChannel,
    .dlBoletoChannel,
    .ebxBoletoChannel,
    .wpIdealChannel,
    .wpSofortChannel,
    .qiwiChannel,
    .ignYandexmoneyChannel,
    .ignWesternunionChannel,
    .wiretransferChannel,
    .klarnaPaylaterChannel,
    .klarnaSliceitChannel,
    .paypalChannel,
    .ppExpressChannel,
    .paytmChannel,
    .payubizNetbankingChannel,
    .payubizUpiChannel,
    .dlRupayChannel,
    .giftcardChannel,
    .klarnaUkSliceitChannel,
    .storeCreditChannel,
    .klarnaUsSliceitChannel,
    .ckoBancontactChannel,
    .ckoMultibancoChannel,
    .ckoEpsChannel,
    .ckoGiropayChannel,
    .codChannel,
    .alipayChannel,
    .wxpayChannel,
    .ckoP24Channel,
  ]
}

#endif  // swift(>=4.2)

public enum Common_OrderStatusTypeEnum: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  ///未支付订单
  case unpaid // = 0

  ///处理中订单
  case preparing // = 1

  ///运输中订单
  case shipped // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .unpaid
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unpaid
    case 1: self = .preparing
    case 2: self = .shipped
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unpaid: return 0
    case .preparing: return 1
    case .shipped: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Common_OrderStatusTypeEnum: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Common_OrderStatusTypeEnum] = [
    .unpaid,
    .preparing,
    .shipped,
  ]
}

#endif  // swift(>=4.2)

public enum Common_PromptTypeEnum: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  ///未知
  case promptTypeUnknown // = 0

  ///超出
  case promptTypeMore // = 1

  ///不足
  case promptTypeLess // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .promptTypeUnknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .promptTypeUnknown
    case 1: self = .promptTypeMore
    case 2: self = .promptTypeLess
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .promptTypeUnknown: return 0
    case .promptTypeMore: return 1
    case .promptTypeLess: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Common_PromptTypeEnum: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Common_PromptTypeEnum] = [
    .promptTypeUnknown,
    .promptTypeMore,
    .promptTypeLess,
  ]
}

#endif  // swift(>=4.2)

public enum Common_ChargeTypeEnum: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  ///未知
  case chargeTypeUnknown // = 0

  ///cod手续费
  case chargeTypeCod // = 1
  case UNRECOGNIZED(Int)

  public init() {
    self = .chargeTypeUnknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .chargeTypeUnknown
    case 1: self = .chargeTypeCod
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .chargeTypeUnknown: return 0
    case .chargeTypeCod: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Common_ChargeTypeEnum: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Common_ChargeTypeEnum] = [
    .chargeTypeUnknown,
    .chargeTypeCod,
  ]
}

#endif  // swift(>=4.2)

public enum Common_AppIdEnum: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  ///unknow
  case unknownAppID // = 0

  ///litb
  case litb // = 1

  ///mini
  case mini // = 7

  ///ador
  case ador // = 140

  ///ouku
  case ouku // = 172

  ///wehobi
  case wehobi // = 173
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknownAppID
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknownAppID
    case 1: self = .litb
    case 7: self = .mini
    case 140: self = .ador
    case 172: self = .ouku
    case 173: self = .wehobi
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknownAppID: return 0
    case .litb: return 1
    case .mini: return 7
    case .ador: return 140
    case .ouku: return 172
    case .wehobi: return 173
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Common_AppIdEnum: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Common_AppIdEnum] = [
    .unknownAppID,
    .litb,
    .mini,
    .ador,
    .ouku,
    .wehobi,
  ]
}

#endif  // swift(>=4.2)

public enum Common_ClientEnum: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  ///unknow
  case unknownClientID // = 0

  ///android
  case android // = 1

  ///iphone
  case iphone // = 2

  ///vela
  case vela // = 3

  ///vela_pc
  case velapc // = 4
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknownClientID
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknownClientID
    case 1: self = .android
    case 2: self = .iphone
    case 3: self = .vela
    case 4: self = .velapc
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknownClientID: return 0
    case .android: return 1
    case .iphone: return 2
    case .vela: return 3
    case .velapc: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Common_ClientEnum: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Common_ClientEnum] = [
    .unknownClientID,
    .android,
    .iphone,
    .vela,
    .velapc,
  ]
}

#endif  // swift(>=4.2)

public enum Common_FormTypeEnum: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  ///UNKNOWN
  case formTypeUnknown // = 0

  ///无表单
  case formTypeNone // = 1

  ///单文本框
  case formTypeSingleText // = 2

  ///特殊表单
  case formTypeSpecial // = 3

  ///其他表单
  case formTypeOther // = 4
  case UNRECOGNIZED(Int)

  public init() {
    self = .formTypeUnknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .formTypeUnknown
    case 1: self = .formTypeNone
    case 2: self = .formTypeSingleText
    case 3: self = .formTypeSpecial
    case 4: self = .formTypeOther
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .formTypeUnknown: return 0
    case .formTypeNone: return 1
    case .formTypeSingleText: return 2
    case .formTypeSpecial: return 3
    case .formTypeOther: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Common_FormTypeEnum: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Common_FormTypeEnum] = [
    .formTypeUnknown,
    .formTypeNone,
    .formTypeSingleText,
    .formTypeSpecial,
    .formTypeOther,
  ]
}

#endif  // swift(>=4.2)

public enum Common_PayTypeEnum: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  ///UNKNOWN
  case payTypeUnknown // = 0

  ///paypal特殊
  case payTypePaypalSpecial // = 1

  ///SDK集成
  case payTypeSdk // = 2

  ///接口常规
  case payTypeNormal // = 3

  ///信用卡
  case payTypeCc // = 4

  ///webView
  case payTypeWebView // = 5

  ///浏览器
  case payTypeBrowser // = 6

  ///其他
  case payTypeOther // = 7
  case UNRECOGNIZED(Int)

  public init() {
    self = .payTypeUnknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .payTypeUnknown
    case 1: self = .payTypePaypalSpecial
    case 2: self = .payTypeSdk
    case 3: self = .payTypeNormal
    case 4: self = .payTypeCc
    case 5: self = .payTypeWebView
    case 6: self = .payTypeBrowser
    case 7: self = .payTypeOther
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .payTypeUnknown: return 0
    case .payTypePaypalSpecial: return 1
    case .payTypeSdk: return 2
    case .payTypeNormal: return 3
    case .payTypeCc: return 4
    case .payTypeWebView: return 5
    case .payTypeBrowser: return 6
    case .payTypeOther: return 7
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Common_PayTypeEnum: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Common_PayTypeEnum] = [
    .payTypeUnknown,
    .payTypePaypalSpecial,
    .payTypeSdk,
    .payTypeNormal,
    .payTypeCc,
    .payTypeWebView,
    .payTypeBrowser,
    .payTypeOther,
  ]
}

#endif  // swift(>=4.2)

public struct Common_Empty {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 占位
  public var empty: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Common_Country {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 国家ID
  public var id: Int32 = 0

  /// 国家全称的名字
  public var name: String = String()

  /// 国家缩写, 例如 US
  public var isoCode2: String = String()

  /// 国家缩写, 例如 USA
  public var isoCode3: String = String()

  ///电话区号 +61 等(备用)
  public var phoneAreaCode: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Common_Result {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 接口调用状态 true 成功  false 失败
  public var result: Bool = false

  /// 消息
  public var msg: String = String()

  /// 业务code码    00000000 表示成功   -1001 表示服务器内部异常
  public var code: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Common_CurrencyDTO {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///货币id
  public var id: Int64 = 0

  /// 货币名称 USD dollar
  public var title: String = String()

  /// 货币 USD
  public var code: String = String()

  ///$
  public var symbolLeft: String = String()

  ///小数符号
  public var decimalPoint: String = String()

  ///小数点后位数 2
  public var decimalPlaces: String = String()

  /// 汇率
  public var value: String = String()

  ///千分位分隔符，1,100,100
  public var thousandsPoint: String = String()

  ///右符号
  public var symbolRight: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "common"

extension Common_AddressTypeEnum: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN"),
    1: .same(proto: "DELIVERY"),
    2: .same(proto: "BILLING"),
  ]
}

extension Common_PaymentStatusEnum: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "INIT"),
    5: .same(proto: "REDIRECT"),
    10: .same(proto: "PROCESSING"),
    11: .same(proto: "COD_INIT"),
    15: .same(proto: "COD_PROCESSING"),
    20: .same(proto: "SUCCESSED"),
    30: .same(proto: "FAILED"),
  ]
}

extension Common_PayNameEnum: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PAY_NAME_UNKNOWN"),
    1: .same(proto: "BOLETO"),
    2: .same(proto: "BRAZIL_INSTALLMENTS"),
    3: .same(proto: "CREDIT_OR_DEBIT_CARD"),
    4: .same(proto: "IDEAL"),
    5: .same(proto: "KLARNA_PAY_LATER"),
    6: .same(proto: "KLARNA_SLICE_IT"),
    7: .same(proto: "MEXICO_INSTALLMENTS"),
    8: .same(proto: "NETBANKING"),
    9: .same(proto: "OXXO"),
    10: .same(proto: "PAGO_A_PLAZOS"),
    11: .same(proto: "PARCELAMENTO"),
    12: .same(proto: "PAYPAL"),
    13: .same(proto: "PAYPAL_EXPRESS"),
    14: .same(proto: "PAYTM"),
    15: .same(proto: "QIWI"),
    16: .same(proto: "RUPAY"),
    17: .same(proto: "SOFORT"),
    18: .same(proto: "UPI"),
    19: .same(proto: "WESTERNUNION"),
    20: .same(proto: "WIRETRANSFER"),
    21: .same(proto: "YANDEXMONEY"),
    22: .same(proto: "STORE_CREDIT"),
    23: .same(proto: "KLARNA_PAY_IN_3_INSTALLMENTS"),
    24: .same(proto: "KLARNA_PAY_IN_4_INSTALLMENTS"),
    25: .same(proto: "BANCONTACT"),
    26: .same(proto: "MULTIBANCO"),
    27: .same(proto: "EPS"),
    28: .same(proto: "GIROPAY"),
    29: .same(proto: "COD"),
    30: .same(proto: "ALIPAY"),
    31: .same(proto: "WECHAT_PAY"),
    32: .same(proto: "PRZELEWY24"),
  ]
}

extension Common_TaxCodeOrIdCardTypeEnum: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "CODE_TYPE_UNKNOWN"),
    1: .same(proto: "CPF"),
    2: .same(proto: "CNPJ"),
    3: .same(proto: "CUIL"),
    4: .same(proto: "CUIT"),
    5: .same(proto: "PERSONAL_ID_NUMBER"),
    6: .same(proto: "VAT_ID_NUMBER"),
    7: .same(proto: "CURP"),
  ]
}

extension Common_PayChannelEnum: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NA"),
    1: .same(proto: "ADN_CC_CHANNEL"),
    2: .same(proto: "WP_CC_CHANNEL"),
    3: .same(proto: "IGN_CC_CHANNEL"),
    4: .same(proto: "CKO_CC_CHANNEL"),
    5: .same(proto: "STR_CC_CHANNEL"),
    6: .same(proto: "EBX_BR_INSTALLMENTS_CHANNEL"),
    7: .same(proto: "EBX_MX_INSTALLMENTS_CHANNEL"),
    8: .same(proto: "DL_BR_INSTALLMENTS_CHANNEL"),
    9: .same(proto: "DL_MX_INSTALLMENTS_CHANNEL"),
    10: .same(proto: "DL_OXXO_CHANNEL"),
    11: .same(proto: "DL_BOLETO_CHANNEL"),
    12: .same(proto: "EBX_BOLETO_CHANNEL"),
    13: .same(proto: "WP_IDEAL_CHANNEL"),
    14: .same(proto: "WP_SOFORT_CHANNEL"),
    15: .same(proto: "QIWI_CHANNEL"),
    16: .same(proto: "IGN_YANDEXMONEY_CHANNEL"),
    17: .same(proto: "IGN_WESTERNUNION_CHANNEL"),
    18: .same(proto: "WIRETRANSFER_CHANNEL"),
    19: .same(proto: "KLARNA_PAYLATER_CHANNEL"),
    20: .same(proto: "KLARNA_SLICEIT_CHANNEL"),
    21: .same(proto: "PAYPAL_CHANNEL"),
    22: .same(proto: "PP_EXPRESS_CHANNEL"),
    23: .same(proto: "PAYTM_CHANNEL"),
    24: .same(proto: "PAYUBIZ_NETBANKING_CHANNEL"),
    25: .same(proto: "PAYUBIZ_UPI_CHANNEL"),
    26: .same(proto: "DL_RUPAY_CHANNEL"),
    27: .same(proto: "GIFTCARD_CHANNEL"),
    28: .same(proto: "KLARNA_UK_SLICEIT_CHANNEL"),
    29: .same(proto: "STORE_CREDIT_CHANNEL"),
    30: .same(proto: "KLARNA_US_SLICEIT_CHANNEL"),
    31: .same(proto: "CKO_BANCONTACT_CHANNEL"),
    32: .same(proto: "CKO_MULTIBANCO_CHANNEL"),
    33: .same(proto: "CKO_EPS_CHANNEL"),
    34: .same(proto: "CKO_GIROPAY_CHANNEL"),
    35: .same(proto: "COD_CHANNEL"),
    36: .same(proto: "ALIPAY_CHANNEL"),
    37: .same(proto: "WXPAY_CHANNEL"),
    38: .same(proto: "CKO_P24_CHANNEL"),
  ]
}

extension Common_OrderStatusTypeEnum: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNPAID"),
    1: .same(proto: "PREPARING"),
    2: .same(proto: "SHIPPED"),
  ]
}

extension Common_PromptTypeEnum: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PROMPT_TYPE_UNKNOWN"),
    1: .same(proto: "PROMPT_TYPE_MORE"),
    2: .same(proto: "PROMPT_TYPE_LESS"),
  ]
}

extension Common_ChargeTypeEnum: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "CHARGE_TYPE_UNKNOWN"),
    1: .same(proto: "CHARGE_TYPE_COD"),
  ]
}

extension Common_AppIdEnum: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN_APP_ID"),
    1: .same(proto: "LITB"),
    7: .same(proto: "MINI"),
    140: .same(proto: "ADOR"),
    172: .same(proto: "OUKU"),
    173: .same(proto: "WEHOBI"),
  ]
}

extension Common_ClientEnum: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN_CLIENT_ID"),
    1: .same(proto: "ANDROID"),
    2: .same(proto: "IPHONE"),
    3: .same(proto: "VELA"),
    4: .same(proto: "VELAPC"),
  ]
}

extension Common_FormTypeEnum: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "FORM_TYPE_UNKNOWN"),
    1: .same(proto: "FORM_TYPE_NONE"),
    2: .same(proto: "FORM_TYPE_SINGLE_TEXT"),
    3: .same(proto: "FORM_TYPE_SPECIAL"),
    4: .same(proto: "FORM_TYPE_OTHER"),
  ]
}

extension Common_PayTypeEnum: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PAY_TYPE_UNKNOWN"),
    1: .same(proto: "PAY_TYPE_PAYPAL_SPECIAL"),
    2: .same(proto: "PAY_TYPE_SDK"),
    3: .same(proto: "PAY_TYPE_NORMAL"),
    4: .same(proto: "PAY_TYPE_CC"),
    5: .same(proto: "PAY_TYPE_WEB_VIEW"),
    6: .same(proto: "PAY_TYPE_BROWSER"),
    7: .same(proto: "PAY_TYPE_OTHER"),
  ]
}

extension Common_Empty: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Empty"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "empty"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.empty) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.empty.isEmpty {
      try visitor.visitSingularStringField(value: self.empty, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Common_Empty, rhs: Common_Empty) -> Bool {
    if lhs.empty != rhs.empty {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Common_Country: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Country"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .same(proto: "isoCode2"),
    4: .same(proto: "isoCode3"),
    5: .same(proto: "phoneAreaCode"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.isoCode2) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.isoCode3) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.phoneAreaCode) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt32Field(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if !self.isoCode2.isEmpty {
      try visitor.visitSingularStringField(value: self.isoCode2, fieldNumber: 3)
    }
    if !self.isoCode3.isEmpty {
      try visitor.visitSingularStringField(value: self.isoCode3, fieldNumber: 4)
    }
    if !self.phoneAreaCode.isEmpty {
      try visitor.visitSingularStringField(value: self.phoneAreaCode, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Common_Country, rhs: Common_Country) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.name != rhs.name {return false}
    if lhs.isoCode2 != rhs.isoCode2 {return false}
    if lhs.isoCode3 != rhs.isoCode3 {return false}
    if lhs.phoneAreaCode != rhs.phoneAreaCode {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Common_Result: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Result"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "result"),
    2: .same(proto: "msg"),
    3: .same(proto: "code"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.result) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.msg) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.code) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.result != false {
      try visitor.visitSingularBoolField(value: self.result, fieldNumber: 1)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 2)
    }
    if !self.code.isEmpty {
      try visitor.visitSingularStringField(value: self.code, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Common_Result, rhs: Common_Result) -> Bool {
    if lhs.result != rhs.result {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.code != rhs.code {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Common_CurrencyDTO: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CurrencyDTO"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "title"),
    3: .same(proto: "code"),
    4: .same(proto: "symbolLeft"),
    5: .same(proto: "decimalPoint"),
    6: .same(proto: "decimalPlaces"),
    7: .same(proto: "value"),
    8: .same(proto: "thousandsPoint"),
    9: .same(proto: "symbolRight"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.code) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.symbolLeft) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.decimalPoint) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.decimalPlaces) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.value) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.thousandsPoint) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.symbolRight) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 2)
    }
    if !self.code.isEmpty {
      try visitor.visitSingularStringField(value: self.code, fieldNumber: 3)
    }
    if !self.symbolLeft.isEmpty {
      try visitor.visitSingularStringField(value: self.symbolLeft, fieldNumber: 4)
    }
    if !self.decimalPoint.isEmpty {
      try visitor.visitSingularStringField(value: self.decimalPoint, fieldNumber: 5)
    }
    if !self.decimalPlaces.isEmpty {
      try visitor.visitSingularStringField(value: self.decimalPlaces, fieldNumber: 6)
    }
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 7)
    }
    if !self.thousandsPoint.isEmpty {
      try visitor.visitSingularStringField(value: self.thousandsPoint, fieldNumber: 8)
    }
    if !self.symbolRight.isEmpty {
      try visitor.visitSingularStringField(value: self.symbolRight, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Common_CurrencyDTO, rhs: Common_CurrencyDTO) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.title != rhs.title {return false}
    if lhs.code != rhs.code {return false}
    if lhs.symbolLeft != rhs.symbolLeft {return false}
    if lhs.decimalPoint != rhs.decimalPoint {return false}
    if lhs.decimalPlaces != rhs.decimalPlaces {return false}
    if lhs.value != rhs.value {return false}
    if lhs.thousandsPoint != rhs.thousandsPoint {return false}
    if lhs.symbolRight != rhs.symbolRight {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
